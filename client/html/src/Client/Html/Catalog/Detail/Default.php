<?php

/**
 * @copyright Copyright (c) Metaways Infosystems GmbH, 2012
 * @license LGPLv3, http://www.arcavias.com/en/license
 * @package Client
 * @subpackage Html
 */


/**
 * Default implementation of catalog detail section HTML clients.
 *
 * @package Client
 * @subpackage Html
 */
class Client_Html_Catalog_Detail_Default
	extends Client_Html_Abstract
{
	/** client/html/catalog/detail/default/subparts
	 * List of HTML sub-clients rendered within the catalog detail section
	 *
	 * The output of the frontend is composed of the code generated by the HTML
	 * clients. Each HTML client can consist of serveral (or none) sub-clients
	 * that are responsible for rendering certain sub-parts of the output. The
	 * sub-clients can contain HTML clients themselves and therefore a
	 * hierarchical tree of HTML clients is composed. Each HTML client creates
	 * the output that is placed inside the container of its parent.
	 *
	 * At first, always the HTML code generated by the parent is printed, then
	 * the HTML code of its sub-clients. The order of the HTML sub-clients
	 * determines the order of the output of these sub-clients inside the parent
	 * container. If the configured list of clients is
	 *
	 *  array( "subclient1", "subclient2" )
	 *
	 * you can easily change the order of the output by reordering the subparts:
	 *
	 *  client/html/<clients>/subparts = array( "subclient1", "subclient2" )
	 *
	 * You can also remove one or more parts if they shouldn't be rendered:
	 *
	 *  client/html/<clients>/subparts = array( "subclient1" )
	 *
	 * As the clients only generates structural HTML, the layout defined via CSS
	 * should support adding, removing or reordering content by a fluid like
	 * design.
	 *
	 * @param array List of sub-client names
	 * @since 2014.03
	 * @category Developer
	 */
	private $_subPartPath = 'client/html/catalog/detail/default/subparts';

	/** client/html/catalog/detail/image/name
	 * Name of the image part used by the catalog detail client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Catalog_Detail_Image_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.03
	 * @category Developer
	 */

	/** client/html/catalog/detail/basic/name
	 * Name of the basic part used by the catalog detail client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Catalog_Detail_Basic_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.03
	 * @category Developer
	 */

	/** client/html/catalog/detail/basket/name
	 * Name of the basket part used by the catalog detail client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Catalog_Detail_Basket_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.03
	 * @category Developer
	 */

	/** client/html/catalog/detail/additional/name
	 * Name of the additional part used by the catalog detail client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Catalog_Detail_Additional_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.03
	 * @category Developer
	 */

	/** client/html/catalog/detail/suggest/name
	 * Name of the suggest part used by the catalog detail client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Catalog_Detail_Suggest_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.03
	 * @category Developer
	 */

	/** client/html/catalog/detail/seen/name
	 * Name of the seen part used by the catalog detail client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Catalog_Detail_Seen_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.03
	 * @category Developer
	 */
	private $_subPartNames = array( 'image', 'basic', 'basket', 'additional', 'suggest', 'seen' );


	/**
	 * Returns the HTML code for insertion into the body.
	 *
	 * @return string HTML code
	 */
	public function getBody()
	{
		$context = $this->_getContext();
		$cache = $context->getCache();
		$view = $this->getView();

		$prodid = $view->param( 'd-product-id' );
		$key = 'product/id/' . $prodid . ':detail-body';

		if( ( $html = $cache->get( $key ) ) === null )
		{
			try
			{
				$view = $this->_setViewParams( $view );

				$html = '';
				foreach( $this->_getSubClients( $this->_subPartPath, $this->_subPartNames ) as $subclient ) {
					$html .= $subclient->setView( $view )->getBody();
				}
				$view->detailBody = $html;
			}
			catch( Client_Html_Exception $e )
			{
				$view = $this->getView();
				$error = array( $this->_getContext()->getI18n()->dt( 'client/html', $e->getMessage() ) );
				$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
			}
			catch( Controller_Frontend_Exception $e )
			{
				$view = $this->getView();
				$error = array( $this->_getContext()->getI18n()->dt( 'controller/frontend', $e->getMessage() ) );
				$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
			}
			catch( MShop_Exception $e )
			{
				$view = $this->getView();
				$error = array( $this->_getContext()->getI18n()->dt( 'mshop', $e->getMessage() ) );
				$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
			}
			catch( Exception $e )
			{
				$context = $this->_getContext();
				$context->getLogger()->log( $e->getMessage() . PHP_EOL . $e->getTraceAsString() );

				$view = $this->getView();
				$error = array( $context->getI18n()->dt( 'client/html', 'A non-recoverable error occured' ) );
				$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
			}

			/** client/html/catalog/detail/default/template-body
			 * Relative path to the HTML body template of the catalog detail client.
			 *
			 * The template file contains the HTML code and processing instructions
			 * to generate the result shown in the body of the frontend. The
			 * configuration string is the path to the template file relative
			 * to the layouts directory (usually in client/html/layouts).
			 *
			 * You can overwrite the template file configuration in extensions and
			 * provide alternative templates. These alternative templates should be
			 * named like the default one but with the string "default" replaced by
			 * an unique name. You may use the name of your project for this. If
			 * you've implemented an alternative client class as well, "default"
			 * should be replaced by the name of the new class.
			 *
			 * @param string Relative path to the template creating code for the HTML page body
			 * @since 2014.03
			 * @category Developer
			 * @see client/html/catalog/detail/default/template-header
			 */
			$tplconf = 'client/html/catalog/detail/default/template-body';
			$default = 'catalog/detail/body-default.html';

			$html = $view->render( $this->_getTemplate( $tplconf, $default ) );

			$cache->set( $key, $html, array( 'product/id/' . $prodid ) );
		}

		return $html;
	}


	/**
	 * Returns the HTML string for insertion into the header.
	 *
	 * @return string String including HTML tags for the header
	 */
	public function getHeader()
	{
		$context = $this->_getContext();
		$cache = $context->getCache();
		$view = $this->getView();

		$prodid = $view->param( 'd-product-id' );
		$key = 'product/id/' . $prodid . ':detail-header';

		if( ( $html = $cache->get( $key ) ) === null )
		{
			try
			{
				$view = $this->_setViewParams( $this->getView() );

				$html = '';
				foreach( $this->_getSubClients( $this->_subPartPath, $this->_subPartNames ) as $subclient ) {
					$html .= $subclient->setView( $view )->getHeader();
				}
				$view->detailHeader = $html;
			}
			catch( Exception $e )
			{
				$this->_getContext()->getLogger()->log( $e->getMessage() . PHP_EOL . $e->getTraceAsString() );
				return '';
			}

			/** client/html/catalog/detail/default/template-header
			 * Relative path to the HTML header template of the catalog detail client.
			 *
			 * The template file contains the HTML code and processing instructions
			 * to generate the HTML code that is inserted into the HTML page header
			 * of the rendered page in the frontend. The configuration string is the
			 * path to the template file relative to the layouts directory (usually
			 * in client/html/layouts).
			 *
			 * You can overwrite the template file configuration in extensions and
			 * provide alternative templates. These alternative templates should be
			 * named like the default one but with the string "default" replaced by
			 * an unique name. You may use the name of your project for this. If
			 * you've implemented an alternative client class as well, "default"
			 * should be replaced by the name of the new class.
			 *
			 * @param string Relative path to the template creating code for the HTML page head
			 * @since 2014.03
			 * @category Developer
			 * @see client/html/catalog/detail/default/template-body
			 */
			$tplconf = 'client/html/catalog/detail/default/template-header';
			$default = 'catalog/detail/header-default.html';

			$html = $view->render( $this->_getTemplate( $tplconf, $default ) );

			$cache->set( $key, $html, array( 'product/id/' . $prodid ) );
		}

		return $html;
	}


	/**
	 * Returns the sub-client given by its name.
	 *
	 * @param string $type Name of the client type
	 * @param string|null $name Name of the sub-client (Default if null)
	 * @return Client_Html_Interface Sub-client object
	 */
	public function getSubClient( $type, $name = null )
	{
		return $this->_createSubClient( 'catalog/detail/' . $type, $name );
	}


	/**
	 * Tests if the output of is cachable.
	 *
	 * @param integer $what Header or body constant from Client_HTML_Abstract
	 * @return boolean True if the output can be cached, false if not
	 */
	public function isCachable( $what )
	{
		return $this->_isCachable( $what, $this->_subPartPath, $this->_subPartNames );
	}


	/**
	 * Processes the input, e.g. store given values.
	 * A view must be available and this method doesn't generate any output
	 * besides setting view variables.
	 */
	public function process()
	{
		try
		{
			$this->_process( $this->_subPartPath, $this->_subPartNames );
		}
		catch( Client_Html_Exception $e )
		{
			$view = $this->getView();
			$error = array( $this->_getContext()->getI18n()->dt( 'client/html', $e->getMessage() ) );
			$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
		}
		catch( Controller_Frontend_Exception $e )
		{
			$view = $this->getView();
			$error = array( $this->_getContext()->getI18n()->dt( 'controller/frontend', $e->getMessage() ) );
			$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
		}
		catch( MShop_Exception $e )
		{
			$view = $this->getView();
			$error = array( $this->_getContext()->getI18n()->dt( 'mshop', $e->getMessage() ) );
			$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
		}
		catch( Exception $e )
		{
			$context = $this->_getContext();
			$context->getLogger()->log( $e->getMessage() . PHP_EOL . $e->getTraceAsString() );

			$view = $this->getView();
			$error = array( $context->getI18n()->dt( 'client/html', 'A non-recoverable error occured' ) );
			$view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
		}
	}


	/**
	 * Sets the necessary parameter values in the view.
	 *
	 * @param MW_View_Interface $view The view object which generates the HTML output
	 * @return MW_View_Interface Modified view object
	 */
	protected function _setViewParams( MW_View_Interface $view )
	{
		if( !isset( $this->_cache ) )
		{
			$context = $this->_getContext();
			$config = $context->getConfig();

			$prodid = $view->param( 'd-product-id' );
			$default = array( 'media', 'price', 'text', 'attribute', 'product' );

			/** client/html/catalog/domains
			 * A list of domain names whose items should be available in the catalog view templates
			 *
			 * @see client/html/catalog/detail/domains
			 */
			$domains = $config->get( 'client/html/catalog/domains', $default );

			/** client/html/catalog/detail/domains
			 * A list of domain names whose items should be available in the product detail view template
			 *
			 * The templates rendering product details usually add the images,
			 * prices, texts, attributes, products, etc. associated to the product
			 * item. If you want to display additional or less content, you can
			 * configure your own list of domains (attribute, media, price, product,
			 * text, etc. are domains) whose items are fetched from the storage.
			 * Please keep in mind that the more domains you add to the configuration,
			 * the more time is required for fetching the content!
			 *
			 * Since version 2014.05 this configuration option overwrites the
			 * "client/html/catalog/domains" option that allows to configure the
			 * domain names of the items fetched for all catalog related data.
			 *
			 * @param array List of domain names
			 * @since 2014.03
			 * @category Developer
			 * @see client/html/catalog/domains
			 * @see client/html/catalog/list/domains
			 */
			$domains = $config->get( 'client/html/catalog/detail/domains', $default );

			$manager = MShop_Factory::createManager( $context, 'product' );
			$productItem = $manager->getItem( $prodid, $domains );


			$attrManager = MShop_Factory::createManager( $context, 'attribute' );
			$attrSearch = $attrManager->createSearch( true );
			$expr = array(
				$attrSearch->compare( '==', 'attribute.id', array_keys( $productItem->getRefItems( 'attribute' ) ) ),
				$attrSearch->getConditions(),
			);
			$attrSearch->setConditions( $attrSearch->combine( '&&', $expr ) );


			$mediaManager = MShop_Factory::createManager( $context, 'media' );
			$mediaSearch = $mediaManager->createSearch( true );
			$expr = array(
				$mediaSearch->compare( '==', 'media.id', array_keys( $productItem->getRefItems( 'media' ) ) ),
				$mediaSearch->getConditions(),
			);
			$mediaSearch->setConditions( $mediaSearch->combine( '&&', $expr ) );


			$view->detailProductItem = $productItem;
			$view->detailProductAttributeItems = $attrManager->searchItems( $attrSearch, $default );
			$view->detailProductMediaItems = $mediaManager->searchItems( $mediaSearch, $default );
			$view->detailParams = $this->_getClientParams( $view->param() );

			$this->_cache = $view;
		}

		return $this->_cache;
	}
}