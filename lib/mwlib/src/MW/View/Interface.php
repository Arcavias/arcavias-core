<?php

/**
 * @copyright Copyright (c) Metaways Infosystems GmbH, 2012
 * @license LGPLv3, http://www.arcavias.com/en/license
 * @package MW
 * @subpackage View
 * @version $Id$
 */


/**
 * Common interface for all view classes.
 *
 * @package MW
 * @subpackage View
 */
interface MW_View_Interface
{
	/**
	 * Calls the view helper with the given name and arguments and returns it's output.
	 *
	 * @param string $name Name of the view helper
	 * @param array $args Arguments passed to the view helper
	 * @return mixed Output depending on the view helper
	 */
	public function __call( $name, array $args );

	/**
	 * Returns the value associated to the given key.
	 *
	 * @param string $key Name of the value that should be returned
	 * @return mixed Value associated to the given key
	 * @throws MW_View_Exception If the requested key isn't available
	 */
	public function __get( $key );

	/**
	 * Tests if a key with the given name exists.
	 *
	 * @param string $key Name of the value that should be tested
	 * @return boolean True if the key exists, false if not
	 */
	public function __isset( $key );

	/**
	 * Removes a key from the stored values.
	 *
	 * @param string $key Name of the value that should be removed
	 */
	public function __unset( $key );

	/**
	 * Sets a new value for the given key.
	 *
	 * @param string $key Name of the value that should be set
	 * @param mixed $value Value associated to the given key
	 */
	public function __set( $key, $value );

	/**
	 * Adds a view helper instance to the view.
	 *
	 * @param string $name Name of the view helper as called in the template
	 * @param MW_View_Helper_Interface $helper View helper instance
	 */
	public function addHelper( $name, MW_View_Helper_Interface $helper );

	/**
	 * Assigns a whole set of values at once to the view.
	 * This method overwrites already existing key/value pairs set by the magic method.
	 *
	 * @param array $values Associative list of key/value pairs
	 */
	public function assign( array $values );

	/**
	 * Returns the value associated to the given key or the default value if the key is not available.
	 *
	 * @param string $key Name of the value that should be returned
	 * @param mixed $default Default value returned if ths key is not available
	 * @return mixed Value associated to the given key or the default value
	 */
	public function get( $key, $default = null );

	/**
	 * Renders the output based on the given template file name and the key/value pairs.
	 *
	 * @param string $filename File name of the view template
	 * @return string Output generated by the template
	 * @throws MW_View_Exception If the template isn't found
	 */
	public function render( $filename );
}
